/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package linked;

import org.junit.Test;
import types.LinkedList;

import static org.junit.Assert.*;

public class AppTest {
    LinkedList<Integer> testList = new LinkedList<>();

    // 1.Can successfully instantiate an empty linked list
    @Test
    public void testEmptyLL() {
        assertNull("null failed", testList.head);
    }

    // 2.Can properly insert into the linked list
    @Test
    public void testInsert() {
        testList.insertABeginning(1);
        assertTrue("Error with Insertion:\n", testList.size > 0);
    }

    // 3.The head property will properly point to the first node in the linked list
    // 4.Can properly insert multiple nodes into the linked list
    @Test
    public void testHeadAndNodes() {
        testList.insertABeginning(1);
        testList.insertABeginning(2);
        testList.insertABeginning(3);
        assertEquals("Error with Pointing or Insertion:\n ",
                (Integer) 3,
                testList.head.getData()
        );
    }

    // 5.Will return true when finding a value within the linked list that exists
    // 6. Will return false when searching for a value in the linked list that does not exist
    @Test
    public void testSearch() {
        testList.insertABeginning(1);
        assertTrue("Should find 1:\n", testList.Includes(1));
        assertFalse("Should detect that 2 is not exist:\n", testList.Includes(2));
    }

    // 7. Can properly return a collection of all the values that exist in the linked list
    @Test
    public void testList() {
        testList.insertABeginning(1);
        testList.insertABeginning(2);
        testList.insertABeginning(3);
        assertEquals("{ 3 } -> { 2 } -> { 1 } -> NULL", String.valueOf(testList));
    }

    // Code Challenge: Class 06
// 8.Can successfully add a node to the end of the linked list
// 9.Can successfully add multiple nodes to the end of a linked list
    @Test
    public void testAppend() {
        testList();
        testList.append(40);
        assertEquals("{ 3 } -> { 2 } -> { 1 } -> { 40 } -> NULL", String.valueOf(testList));
        testList.append(41);
        assertEquals("{ 3 } -> { 2 } -> { 1 } -> { 40 } -> { 41 } -> NULL", String.valueOf(testList));
    }

    // 10.Can successfully insert a node before a node located i the middle of a linked list
// 11.Can successfully insert a node before the first node of a linked list
    @Test
    public void testInsertBefore() {
        testList();
        testList.insertBefore(2, 23);
        assertEquals("{ 3 } -> { 23 } -> { 2 } -> { 1 } -> NULL", String.valueOf(testList));
        testList.insertBefore(3, 33);
        assertEquals("{ 33 } -> { 3 } -> { 23 } -> { 2 } -> { 1 } -> NULL", String.valueOf(testList));
    }

    // 12.Can successfully insert after a node in the middle of the linked list
// 13.Can successfully insert a node after the last node of the linked list
    @Test
    public void testInsertAfter() {
        testList();
        testList.insertAfter(2, 25);
        assertEquals("{ 3 } -> { 2 } -> { 25 } -> { 1 } -> NULL", String.valueOf(testList));
        testList.insertAfter(1, 15);
        assertEquals("{ 3 } -> { 2 } -> { 25 } -> { 1 } -> { 15 } -> NULL", String.valueOf(testList));
    }

    // Code Challenge: Class 07
// 14.Where k is greater than the length of the linked list
// 15.Where k and the length of the list are the same
// 16.Where k is not a positive integer
// 17.Where the linked list is of a size 1
// 18."Happy Path" where k is not at the end, but somewhere in the middle of the linked list
    @Test
    public void testKthFromEnd() {
        testList();
        assertEquals("The number 5 is out of range", testList.kthFromEnd(5));
        assertEquals("The number 3 is out of range", testList.kthFromEnd(3));
        assertEquals("The number -1 is out of range", testList.kthFromEnd(-1));
        assertEquals("2", testList.kthFromEnd(1));
        LinkedList<Integer> size1 = new LinkedList<>();
        size1.insertABeginning(10);
        assertEquals("10", size1.kthFromEnd(0));
    }


}
